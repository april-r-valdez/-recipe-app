import React, { useState, useEffect } from 'react'
import { useParams } from 'react-router-dom';
import RecipePage from '../../widgets/RecipePage';
import { addDoc, collection } from 'firebase/firestore';
import { db } from '../../firebase';
import extractNutritionData from './NutritionFactsParser';
import uploadImageToFirebase from './UploadImage';

const API_KEY = process.env.REACT_APP_RECIPE_API_KEY;

const RecipeFromAPI = () => {
  
  const [recipe, setRecipe] = useState({});
  const [ingredientDetails, setIngredientDetails] = useState([]);
  const [directions, setDirections] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [nutrition, setNutrition] = useState({});
  const [currentRating, setCurrentRating] = useState(5);

  // Signal save recipe successfully or not
  const[saveStatus, setSaveStatus] = useState(false);
  
  // useParam hook to get the recipe id passed as a parameter in the url
  let param = useParams();

  const getRecipeFromAPI = async (recipeId) => {
    try {
        // calling Spoonacular API to get the recipe based on recipe id
        const response = await fetch(`https://api.spoonacular.com/recipes/${recipeId}/information?apiKey=${API_KEY}`);
        const data = await response.json();
        console.log(data);
        setRecipe(data);
        setIngredients(data.extendedIngredients.map((ingredient) => ingredient.name));
        setIngredientDetails(data.extendedIngredients.map((ingredientDetail) => ingredientDetail.original));
        setDirections(data.analyzedInstructions[0].steps.map((instruction) => instruction.step));
        
        // call parser to parse nutrition fact from summary field in data
        const nutritionData = JSON.parse(extractNutritionData(data.summary));
        const calories = parseInt(nutritionData.calories);
        const fat = parseInt(nutritionData.fat);
        const protein = parseInt(nutritionData.protein);
        const carb = calories - (4*protein + 9*fat);
        const nutrition = {
          calories: calories,
          fat: fat,
          protein: protein,
          carbs: carb,
        }
        setNutrition(nutrition);

    } catch (error) {
        console.log("Error fetching recipe: ", error);
    }
  };

  // useEffect hook to call getRecipeFromAPI() each time a new recipe is generated
  useEffect(() => {
    getRecipeFromAPI(param.id);
  }, [param.id]);


  // save this recipe to the database when user click save button
  const recipeCollectionRef = collection(db, "Recipes");
  const handleSave = async () => {
    try {
      
      // upload recipe image to Firebase Storage
      let imageLocation = null;
      if (recipe.image) {  // need to check if there is a image url from the data
        imageLocation = 'RecipeImages/' + String(recipe.id) + '.jpg';
        uploadImageToFirebase(recipe.image, imageLocation);
      }

      // save this recipe to the database
      // Note: document id is auto generated by Firebase
      const recipeRef = await addDoc(recipeCollectionRef, {
        name: recipe.title,
        cookTime: recipe.readyInMinutes,
        imageLoc: imageLocation,
        ingredients: ingredients,
        ingredientDetails: ingredientDetails,
        directions: directions,
        servings: recipe.servings,
        vegan: recipe.vegan,
        glutenFree: recipe.glutenFree,
        dairyFree: recipe.dairyFree,
        nutrition: nutrition,
        sumRating: currentRating, // rating is set to 5 stars initially
        ratingCount: 1
      });

      // log recipe id
      console.log("Recipe ID: ", recipeRef.id);

      // set saved successfully
      setSaveStatus(true);

    } catch(error) {
      console.log("Error saving recipe: ", error);
    }
  }

  const handleSubmitRating = (newRating) => {
    setCurrentRating(newRating);
  }

  return (
    <div>
      <RecipePage name={recipe.title} 
              image={recipe.image} 
              ingredients={ingredientDetails} 
              directions={directions} 
              nutrition={nutrition}
              rating={currentRating}
              ratingCount={1}
              onSubmitRating={handleSubmitRating} />
      
      {/* User can only click save recipe once, then the button will be disabled */}
      <button className='btn btn-success mb-3' onClick={handleSave} disabled={saveStatus}>
        {saveStatus ? 'Saved' : 'Save Recipe'}
      </button>
    </div>
  )
}

export default RecipeFromAPI;
