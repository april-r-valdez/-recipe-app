import React, { useState, useEffect } from 'react'
import { useParams } from 'react-router-dom';
import RecipePage from '../../widgets/RecipePage';
import { addDoc, collection } from 'firebase/firestore';
import { db } from '../../firebase';

const API_KEY = process.env.REACT_APP_RECIPE_API_KEY;

const RecipeFromAPI = () => {
  
  const [recipe, setRecipe] = useState({});
  const [ingredientDetails, setIngredientDetails] = useState([]);
  const [directions, setDirections] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  
  // useParam hook to get the recipe id passed as a parameter in the url
  let param = useParams();

  const getRecipeFromAPI = async (recipeId) => {
    try {
        // calling Spoonacular API to get the recipe based on recipe id
        const response = await fetch(`https://api.spoonacular.com/recipes/${recipeId}/information?apiKey=${API_KEY}`);
        const data = await response.json();
        console.log(data);
        setRecipe(data);
        setIngredients(data.extendedIngredients.map((ingredient) => ingredient.name));
        setIngredientDetails(data.extendedIngredients.map((ingredientDetail) => ingredientDetail.original));
        setDirections(data.analyzedInstructions[0].steps.map((instruction) => instruction.step));

    } catch (error) {
        console.log("Error fetching recipe: ", error);
    }
  };

  // useEffect hook to call getRecipeFromAPI() each time a new recipe is generated
  useEffect(() => {
    getRecipeFromAPI(param.id);
  }, [param.id]);


  // save this recipe to the database when user click save button
  const recipeCollectionRef = collection(db, "Recipes");
  const handleSave = async () => {
    try {
      // passed in two parameter in addDoc(): the collection reference, and the data to be saved
      // Note: document id is auto generated by Firebase
      await addDoc(recipeCollectionRef, {
        name: recipe.title,
        cookTime: recipe.readyInMinutes,
        imageLoc: recipe.image ? recipe.image : "",  // imageUrl, need to change to local image storage
        ingredients: ingredients,
        ingredientDetails: ingredientDetails,
        directions: directions,
        servings: recipe.servings,
        vegan: recipe.vegan,
        rating: 5, // rating is set to 5 stars initially
      });
    } catch(error) {
      console.log("Error saving recipe: ", error);
    }
  }

  return (
    <div>
      <RecipePage name={recipe.title} 
              image={recipe.image} 
              ingredients={ingredientDetails} 
              directions={directions} />
      <div>
        <button className='btn btn-primary mb-3' onClick={handleSave}>Save Recipe</button>
      </div>
    </div>
  )
}

export default RecipeFromAPI;
